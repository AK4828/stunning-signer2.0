package com.meruvian.ldsigner.entity;

import com.meruvian.ldsigner.entity.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "SIGNED_DOCUMENT".
 */
public class SignedDocument implements java.io.Serializable, LogInformationAware {

    private Long dbId;
    private java.util.Date dbCreateDate;
    private java.util.Date dbUpdateDate;
    private String dbCreateBy;
    private String dbUpdateBy;
    private Integer dbActiveFlag;
    private String id;
    private java.util.Date refCreateDate;
    private String refCreateBy;
    private Long documentId;
    private Long parentDocument;
    private byte[] signatureBlob;
    private byte[] signedDocumentBlob;
    private String signatureProperties;
    private String signatureType;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SignedDocumentDao myDao;

    private Document document;
    private Long document__resolvedKey;

    private SignedDocument signedDocument;
    private Long signedDocument__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public SignedDocument() {
    }

    public SignedDocument(Long dbId) {
        this.dbId = dbId;
    }

    public SignedDocument(Long dbId, java.util.Date dbCreateDate, java.util.Date dbUpdateDate, String dbCreateBy, String dbUpdateBy, Integer dbActiveFlag, String id, java.util.Date refCreateDate, String refCreateBy, Long documentId, Long parentDocument, byte[] signatureBlob, byte[] signedDocumentBlob, String signatureProperties, String signatureType) {
        this.dbId = dbId;
        this.dbCreateDate = dbCreateDate;
        this.dbUpdateDate = dbUpdateDate;
        this.dbCreateBy = dbCreateBy;
        this.dbUpdateBy = dbUpdateBy;
        this.dbActiveFlag = dbActiveFlag;
        this.id = id;
        this.refCreateDate = refCreateDate;
        this.refCreateBy = refCreateBy;
        this.documentId = documentId;
        this.parentDocument = parentDocument;
        this.signatureBlob = signatureBlob;
        this.signedDocumentBlob = signedDocumentBlob;
        this.signatureProperties = signatureProperties;
        this.signatureType = signatureType;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSignedDocumentDao() : null;
    }

    public Long getDbId() {
        return dbId;
    }

    public void setDbId(Long dbId) {
        this.dbId = dbId;
    }

    public java.util.Date getDbCreateDate() {
        return dbCreateDate;
    }

    public void setDbCreateDate(java.util.Date dbCreateDate) {
        this.dbCreateDate = dbCreateDate;
    }

    public java.util.Date getDbUpdateDate() {
        return dbUpdateDate;
    }

    public void setDbUpdateDate(java.util.Date dbUpdateDate) {
        this.dbUpdateDate = dbUpdateDate;
    }

    public String getDbCreateBy() {
        return dbCreateBy;
    }

    public void setDbCreateBy(String dbCreateBy) {
        this.dbCreateBy = dbCreateBy;
    }

    public String getDbUpdateBy() {
        return dbUpdateBy;
    }

    public void setDbUpdateBy(String dbUpdateBy) {
        this.dbUpdateBy = dbUpdateBy;
    }

    public Integer getDbActiveFlag() {
        return dbActiveFlag;
    }

    public void setDbActiveFlag(Integer dbActiveFlag) {
        this.dbActiveFlag = dbActiveFlag;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public java.util.Date getRefCreateDate() {
        return refCreateDate;
    }

    public void setRefCreateDate(java.util.Date refCreateDate) {
        this.refCreateDate = refCreateDate;
    }

    public String getRefCreateBy() {
        return refCreateBy;
    }

    public void setRefCreateBy(String refCreateBy) {
        this.refCreateBy = refCreateBy;
    }

    public Long getDocumentId() {
        return documentId;
    }

    public void setDocumentId(Long documentId) {
        this.documentId = documentId;
    }

    public Long getParentDocument() {
        return parentDocument;
    }

    public void setParentDocument(Long parentDocument) {
        this.parentDocument = parentDocument;
    }

    public byte[] getSignatureBlob() {
        return signatureBlob;
    }

    public void setSignatureBlob(byte[] signatureBlob) {
        this.signatureBlob = signatureBlob;
    }

    public byte[] getSignedDocumentBlob() {
        return signedDocumentBlob;
    }

    public void setSignedDocumentBlob(byte[] signedDocumentBlob) {
        this.signedDocumentBlob = signedDocumentBlob;
    }

    public String getSignatureProperties() {
        return signatureProperties;
    }

    public void setSignatureProperties(String signatureProperties) {
        this.signatureProperties = signatureProperties;
    }

    public String getSignatureType() {
        return signatureType;
    }

    public void setSignatureType(String signatureType) {
        this.signatureType = signatureType;
    }

    /** To-one relationship, resolved on first access. */
    public Document getDocument() {
        Long __key = this.documentId;
        if (document__resolvedKey == null || !document__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DocumentDao targetDao = daoSession.getDocumentDao();
            Document documentNew = targetDao.load(__key);
            synchronized (this) {
                document = documentNew;
            	document__resolvedKey = __key;
            }
        }
        return document;
    }

    public void setDocument(Document document) {
        synchronized (this) {
            this.document = document;
            documentId = document == null ? null : document.getDbId();
            document__resolvedKey = documentId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public SignedDocument getSignedDocument() {
        Long __key = this.parentDocument;
        if (signedDocument__resolvedKey == null || !signedDocument__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SignedDocumentDao targetDao = daoSession.getSignedDocumentDao();
            SignedDocument signedDocumentNew = targetDao.load(__key);
            synchronized (this) {
                signedDocument = signedDocumentNew;
            	signedDocument__resolvedKey = __key;
            }
        }
        return signedDocument;
    }

    public void setSignedDocument(SignedDocument signedDocument) {
        synchronized (this) {
            this.signedDocument = signedDocument;
            parentDocument = signedDocument == null ? null : signedDocument.getDbId();
            signedDocument__resolvedKey = parentDocument;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
    public void setLogInformation(LogInformation logInformation) {
        setRefCreateDate(logInformation.getCreateDate());
        setRefCreateBy(logInformation.getCreateBy());
    }
    // KEEP METHODS END

}
